#!/usr/bin/env bash

# Exit on error. Append || true if you expect an error.
set -o errexit
# Exit on error inside any functions or subshells.
set -o errtrace
# Do not allow use of undefined vars. Use ${VAR:-} to use an undefined VAR
set -o nounset
# Catch the error in case mysqldump fails (but gzip succeeds) in `mysqldump |gzip`
set -o pipefail
# Turn on traces, useful while debugging but commented out by default
#set -o xtrace

# All albums should have a cover.{png,jpg} file
find . -mindepth 2 -maxdepth 2 -type d -exec test -e "{}/cover.png" ';' -prune -o -type d -exec test -e "{}/cover.jpg" ';' -prune -o -type d -print | while IFS= read -r dir; do
  echo "'$dir' has no art"
  exit 1
done

find . -type f -name '*.flac' -exec dirname "{}" \; | sort -u | while IFS= read -r dir; do
  # Files within an album should have the same ALBUM title
  if [[ "$(metaflac --show-tag ALBUM --no-filename "$dir"/*.flac | sort -u | wc -l)" != "1" ]]; then
    echo "'$dir' contains files where the album names don't match"
    exit 1
  fi

  # Files within an album that don't share an ARTIST should have an ALBUMARTIST
  if [[ "$(metaflac --show-tag ARTIST --no-filename "$dir"/*.flac | sort -u | wc -l)" != "1" ]]; then
    if [[ "$(metaflac --show-tag ALBUMARTIST --no-filename "$dir"/*.flac | sort -u | wc -l)" != "1" ]]; then
      echo "'$dir' contains files with different artists but no matching ALBUMARTIST"
      exit 1
    fi
  fi

  # Files within an album should have a DATE, the same DATE and a valid one at that
  date="$(metaflac --show-tag DATE --no-filename "$dir"/*.flac | sort -u)"
  if [[ "$( echo "$date" | wc -l)" != "1" ]]; then
    echo "$dir - multiple dates - $date"
    exit 1
  fi
  if [[ "$date" == "" ]]; then
    echo "$dir is missing DATE"
    if [[ "$dir" != "./King Size Slim/Only_My_Good_Self_to_Blame" ]]; then
      # TODO between 2003 & 2008
      exit 1
    fi
  elif [[ "$date" == "0001-01-01" ]]; then
    echo "$dir has invalid DATE"
    exit 1
  fi
done

# Make sure cover art has the correct format
find . -name 'cover.*' | while IFS= read -r file; do
  type="$(file --brief --mime-type "$file")"
  extension="$(file --brief --extension "$file")"
  if [[ "$extension" == "png" ]]; then
    if [[ "$type" != "image/png" ]]; then
      echo "$file has incorrect extension ($type)"
      exit 1
    fi
  elif [[ "$extension" == "jpeg/jpg/jpe/jfif" ]]; then
    if [[ "$type" != "image/jpeg" ]]; then
      echo "$file has incorrect extension ($type)"
      exit 1
    fi
  else
    echo "Unexpected image found: $file ($type)"
    exit 1
  fi
done

# Perform sanity check of music tags
find . -type f -name '*.flac' | while IFS= read -r file; do
  dir="$(dirname "$file")"

  # TODO enable DATE when all have been added
  for type in ARTIST TRACKNUMBER TRACKTOTAL ALBUM TITLE ARTISTSORT; do
    if [[ "$(metaflac --show-tag $type "$file")" == "" ]]; then
      echo "'$file' is missing $type"
      exit 1
    fi
  done

  if [[ "$(metaflac --show-tag DISCNUMBER "$file")" == "" ]]; then
    echo "'$file' is missing DISCNUMBER"
    if [[ "$(metaflac --show-tag DISCNUMBER "$dir"/*.flac)" != "" ]]; then
      echo "$dir has a mixture of files with and without DISCNUMBER!"
      exit 1
    fi
  fi
done

find . -type f -name '*.flac' | while IFS= read -r file; do
  dir="$(dirname "$file")"

  # Add cover art to all music without it
  if [[ "$(metaflac --list  --block-type='PICTURE' "$file")" == "" ]]; then
    cover="${dir}/cover.png"
    if [[ ! -f "$cover" ]]; then
      cover="${dir}/cover.jpg"
    fi
    if [[ ! -f "$cover" ]]; then
      echo "$dir is missing a cover file and art"
      exit 1
    fi
    metaflac --import-picture-from="$cover" "$file"
  fi

done
